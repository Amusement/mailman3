================
Managing members
================

The `bin/mailman members` command allows a site administrator to display, add,
and remove members from a mailing list.

    >>> mlist1 = create_list('test1@example.com')

    >>> class FakeArgs:
    ...     input_filename = None
    ...     listname = []
    >>> args = FakeArgs()

    >>> from mailman.commands.cli_members import Members
    >>> command = Members()


Listing members
===============

You can list all the members of a mailing list by calling the command with no
options.  To start with, there are no members of the mailing list.

    >>> args.listname = [mlist1.fqdn_listname]
    >>> command.process(args)
    test1@example.com has no members

Once the mailing list add some members, they will be displayed.

    >>> from mailman.interfaces.member import DeliveryMode
    >>> from mailman.app.membership import add_member
    >>> add_member(mlist1, 'anne@example.com', 'Anne Person', 'xxx',
    ...            DeliveryMode.regular, mlist1.preferred_language.code)
    <Member: Anne Person <anne@example.com>
             on test1@example.com as MemberRole.member>
    >>> add_member(mlist1, 'bart@example.com', 'Bart Person', 'xxx',
    ...            DeliveryMode.regular, mlist1.preferred_language.code)
    <Member: Bart Person <bart@example.com>
             on test1@example.com as MemberRole.member>

    >>> command.process(args)
    Anne Person <anne@example.com>
    Bart Person <bart@example.com>

Members are displayed in alphabetical order based on their address.

    >>> add_member(mlist1, 'anne@aaaxample.com', 'Anne Person', 'xxx',
    ...            DeliveryMode.regular, mlist1.preferred_language.code)
    <Member: Anne Person <anne@aaaxample.com>
             on test1@example.com as MemberRole.member>

    >>> command.process(args)
    Anne Person <anne@aaaxample.com>
    Anne Person <anne@example.com>
    Bart Person <bart@example.com>


Adding members
==============

You can add members to a mailing list from the command line.  To do so, you
need a file containing email addresses and full names that can be parsed by
email.utils.parseaddr().

    >>> mlist2 = create_list('test2@example.com')
    >>> addresses = [
    ...     ]

    >>> import os
    >>> path = os.path.join(config.VAR_DIR, 'addresses.txt')
    >>> with open(path, 'w') as fp:
    ...     for address in ('aperson@example.com',
    ...                     'Bart Person <bperson@example.com>',
    ...                     'cperson@example.com (Cate Person)',
    ...                     ):
    ...         print >> fp, address

    >>> args.input_filename = path
    >>> args.listname = [mlist2.fqdn_listname]
    >>> command.process(args)

    >>> sorted(address.address for address in mlist2.members.addresses)
    [u'aperson@example.com', u'bperson@example.com', u'cperson@example.com']

You can also specify '-' as the filename, in which case the addresses are
taken from standard input.

    >>> from StringIO import StringIO
    >>> fp = StringIO()
    >>> fp.encoding = 'us-ascii'
    >>> for address in ('dperson@example.com',
    ...                 'Elly Person <eperson@example.com>',
    ...                 'fperson@example.com (Fred Person)',
    ...                 ):
    ...         print >> fp, address
    >>> fp.seek(0)
    >>> import sys
    >>> sys.stdin = fp

    >>> args.input_filename = '-'
    >>> command.process(args)
    >>> sys.stdin = sys.__stdin__

    >>> sorted(address.address for address in mlist2.members.addresses)
    [u'aperson@example.com', u'bperson@example.com', u'cperson@example.com',
     u'dperson@example.com', u'eperson@example.com', u'fperson@example.com']

Blank lines and lines that begin with '#' are ignored.

    >>> with open(path, 'w') as fp:
    ...     for address in ('gperson@example.com',
    ...                     '# hperson@example.com',
    ...                     '   ',
    ...                     '',
    ...                     'iperson@example.com',
    ...                     ):
    ...         print >> fp, address

    >>> args.input_filename = path
    >>> command.process(args)
    >>> sorted(address.address for address in mlist2.members.addresses)
    [u'aperson@example.com', u'bperson@example.com', u'cperson@example.com',
     u'dperson@example.com', u'eperson@example.com', u'fperson@example.com',
     u'gperson@example.com', u'iperson@example.com']

Addresses which are already subscribed are ignored, although a warning is
printed.

    >>> with open(path, 'w') as fp:
    ...     for address in ('gperson@example.com',
    ...                     'aperson@example.com',
    ...                     'jperson@example.com',
    ...                     ):
    ...         print >> fp, address

    >>> command.process(args)
    Already subscribed (skipping): gperson@example.com
    Already subscribed (skipping): aperson@example.com

    >>> sorted(address.address for address in mlist2.members.addresses)
    [u'aperson@example.com', u'bperson@example.com', u'cperson@example.com',
     u'dperson@example.com', u'eperson@example.com', u'fperson@example.com',
     u'gperson@example.com', u'iperson@example.com', u'jperson@example.com']


Displaying members
==================

With no arguments, the command displays all members of the list.

    >>> args.input_filename = None
    >>> command.process(args)
    aperson@example.com
    Bart Person <bperson@example.com>
    Cate Person <cperson@example.com>
    dperson@example.com
    Elly Person <eperson@example.com>
    Fred Person <fperson@example.com>
    gperson@example.com
    iperson@example.com
    jperson@example.com
