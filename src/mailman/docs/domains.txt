=======
Domains
=======

    # The test framework starts out with an example domain, so let's delete
    # that first.
    >>> from mailman.interfaces.domain import IDomainManager
    >>> manager = IDomainManager(config)
    >>> manager.remove(u'example.com')
    <Domain example.com...>

Domains are how Mailman interacts with email host names and web host names.

    >>> from operator import attrgetter
    >>> def show_domains():
    ...     if len(manager) == 0:
    ...         print 'no domains'
    ...         return
    ...     for domain in sorted(manager, key=attrgetter('email_host')):
    ...         print domain

    >>> show_domains()
    no domains

Adding a domain requires some basic information, of which the email host name
is the only required piece.  The other parts are inferred from that.

    >>> manager.add(u'example.org')
    <Domain example.org, base_url: http://example.org,
            contact_address: postmaster@example.org>
    >>> show_domains()
    <Domain example.org, base_url: http://example.org,
            contact_address: postmaster@example.org>

We can remove domains too.

    >>> manager.remove(u'example.org')
    <Domain example.org, base_url: http://example.org,
            contact_address: postmaster@example.org>
    >>> show_domains()
    no domains

Sometimes the email host name is different than the base url for hitting the
web interface for the domain.

    >>> manager.add(u'example.com', base_url=u'https://mail.example.com')
    <Domain example.com, base_url: https://mail.example.com,
            contact_address: postmaster@example.com>
    >>> show_domains()
    <Domain example.com, base_url: https://mail.example.com,
            contact_address: postmaster@example.com>

Domains can have explicit descriptions and contact addresses.

    >>> manager.add(
    ...     u'example.net',
    ...     base_url=u'http://lists.example.net',
    ...     contact_address=u'postmaster@example.com',
    ...     description=u'The example domain')
    <Domain example.net, The example domain,
            base_url: http://lists.example.net,
            contact_address: postmaster@example.com>

    >>> show_domains()
    <Domain example.com, base_url: https://mail.example.com,
            contact_address: postmaster@example.com>
    <Domain example.net, The example domain,
            base_url: http://lists.example.net,
            contact_address: postmaster@example.com>

In the global domain manager, domains are indexed by their email host name.

    >>> for domain in sorted(manager, key=attrgetter('email_host')):
    ...     print domain.email_host
    example.com
    example.net

    >>> print manager[u'example.net']
    <Domain example.net, The example domain,
            base_url: http://lists.example.net,
            contact_address: postmaster@example.com>

    >>> print manager[u'doesnotexist.com']
    Traceback (most recent call last):
    ...
    KeyError: u'doesnotexist.com'

As with a dictionary, you can also get the domain.  If the domain does not
exist, None or a default is returned.

    >>> print manager.get(u'example.net')
    <Domain example.net, The example domain,
            base_url: http://lists.example.net,
            contact_address: postmaster@example.com>

    >>> print manager.get(u'doesnotexist.com')
    None

    >>> print manager.get(u'doesnotexist.com', u'blahdeblah')
    blahdeblah

Non-existent domains cannot be removed.

    >>> manager.remove(u'doesnotexist.com')
    Traceback (most recent call last):
    ...
    KeyError: u'doesnotexist.com'


Confirmation tokens
===================

Confirmation tokens can be added to either the email confirmation address...

    >>> domain = manager[u'example.net']
    >>> print domain.confirm_address(u'xyz')
    confirm-xyz@example.net

...or the confirmation url.

    >>> print domain.confirm_url(u'abc')
    http://lists.example.net/confirm/abc
