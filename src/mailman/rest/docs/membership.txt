==========
Membership
==========

The REST API can be used to subscribe and unsubscribe users to mailing lists.
A subscribed user is called a *member*.  There is a top level collection that
returns all the members of all known mailing lists.

There are no mailing lists and no members yet.

    >>> dump_json('http://localhost:9001/3.0/members')
    http_etag: "..."
    start: 0
    total_size: 0

We create a mailing list, which starts out with no members.
::

    >>> mlist_one = create_list('test-one@example.com')
    >>> transaction.commit()

    >>> dump_json('http://localhost:9001/3.0/members')
    http_etag: "..."
    start: 0
    total_size: 0


Subscribers
===========

After Bart subscribes to the mailing list, his subscription is available via
the REST interface.
::

    >>> from mailman.interfaces.member import MemberRole
    >>> from mailman.interfaces.usermanager import IUserManager
    >>> from zope.component import getUtility
    >>> user_manager = getUtility(IUserManager)

    >>> from mailman.testing.helpers import subscribe
    >>> subscribe(mlist_one, 'Bart')
    >>> dump_json('http://localhost:9001/3.0/members')
    entry 0:
        address: bperson@example.com
        fqdn_listname: test-one@example.com
        http_etag: ...
        role: member
        self_link: http://localhost:9001/3.0/members/1
        user: http://localhost:9001/3.0/users/1
    http_etag: "..."
    start: 0
    total_size: 1

Bart's specific membership can be accessed directly:

    >>> dump_json('http://localhost:9001/3.0/members/1')
    address: bperson@example.com
    fqdn_listname: test-one@example.com
    http_etag: ...
    role: member
    self_link: http://localhost:9001/3.0/members/1
    user: http://localhost:9001/3.0/users/1

When Cris also joins the mailing list, her subscription is also available via
the REST interface.

    >>> subscribe(mlist_one, 'Cris')
    >>> dump_json('http://localhost:9001/3.0/members')
    entry 0:
        address: bperson@example.com
        fqdn_listname: test-one@example.com
        http_etag: ...
        role: member
        self_link: http://localhost:9001/3.0/members/1
        user: http://localhost:9001/3.0/users/1
    entry 1:
        address: cperson@example.com
        fqdn_listname: test-one@example.com
        http_etag: ...
        role: member
        self_link: http://localhost:9001/3.0/members/2
        user: http://localhost:9001/3.0/users/2
    http_etag: "..."
    start: 0
    total_size: 2

The subscribed members are returned in alphabetical order, so when Anna
subscribes, she is returned first.
::

    >>> subscribe(mlist_one, 'Anna')

    >>> dump_json('http://localhost:9001/3.0/members')
    entry 0:
        address: aperson@example.com
        fqdn_listname: test-one@example.com
        http_etag: ...
        role: member
        self_link: http://localhost:9001/3.0/members/3
        user: http://localhost:9001/3.0/users/3
    entry 1:
        address: bperson@example.com
        fqdn_listname: test-one@example.com
        http_etag: ...
        role: member
        self_link: http://localhost:9001/3.0/members/1
        user: http://localhost:9001/3.0/users/1
    entry 2:
        address: cperson@example.com
        fqdn_listname: test-one@example.com
        http_etag: ...
        role: member
        self_link: http://localhost:9001/3.0/members/2
        user: http://localhost:9001/3.0/users/2
    http_etag: "..."
    start: 0
    total_size: 3

Subscriptions are also returned alphabetically by mailing list posting
address.  Anna and Cris subscribe to this new mailing list.
::

    >>> mlist_two = create_list('alpha@example.com')
    >>> subscribe(mlist_two, 'Anna')
    >>> subscribe(mlist_two, 'Cris')

User ids are different than member ids.

    >>> dump_json('http://localhost:9001/3.0/members')
    entry 0:
        address: aperson@example.com
        fqdn_listname: alpha@example.com
        http_etag: ...
        role: member
        self_link: http://localhost:9001/3.0/members/4
        user: http://localhost:9001/3.0/users/3
    entry 1:
        address: cperson@example.com
        fqdn_listname: alpha@example.com
        http_etag: ...
        role: member
        self_link: http://localhost:9001/3.0/members/5
        user: http://localhost:9001/3.0/users/2
    entry 2:
        address: aperson@example.com
        fqdn_listname: test-one@example.com
        http_etag: ...
        role: member
        self_link: http://localhost:9001/3.0/members/3
        user: http://localhost:9001/3.0/users/3
    entry 3:
        address: bperson@example.com
        fqdn_listname: test-one@example.com
        http_etag: ...
        role: member
        self_link: http://localhost:9001/3.0/members/1
        user: http://localhost:9001/3.0/users/1
    entry 4:
        address: cperson@example.com
        fqdn_listname: test-one@example.com
        http_etag: ...
        role: member
        self_link: http://localhost:9001/3.0/members/2
        user: http://localhost:9001/3.0/users/2
    http_etag: "..."
    start: 0
    total_size: 5

We can also get just the members of a single mailing list.

    >>> dump_json(
    ...     'http://localhost:9001/3.0/lists/alpha@example.com/roster/members')
    entry 0:
        address: aperson@example.com
        fqdn_listname: alpha@example.com
        http_etag: ...
        role: member
        self_link: http://localhost:9001/3.0/members/4
        user: http://localhost:9001/3.0/users/3
    entry 1:
        address: cperson@example.com
        fqdn_listname: alpha@example.com
        http_etag: ...
        role: member
        self_link: http://localhost:9001/3.0/members/5
        user: http://localhost:9001/3.0/users/2
    http_etag: ...
    start: 0
    total_size: 2


Owners and moderators
=====================

Mailing list owners and moderators also show up in the REST API.  Cris becomes
an owner of the alpha mailing list and Dave becomes a moderator of the
test-one mailing list.
::

    >>> subscribe(mlist_one, 'Cris', MemberRole.owner)
    >>> subscribe(mlist_two, 'Dave', MemberRole.moderator)

    >>> dump_json('http://localhost:9001/3.0/members')
    entry 0:
        address: dperson@example.com
        fqdn_listname: alpha@example.com
        http_etag: ...
        role: moderator
        self_link: http://localhost:9001/3.0/members/7
        user: http://localhost:9001/3.0/users/4
    entry 1:
        address: aperson@example.com
        fqdn_listname: alpha@example.com
        http_etag: ...
        role: member
        self_link: http://localhost:9001/3.0/members/4
        user: http://localhost:9001/3.0/users/3
    entry 2:
        address: cperson@example.com
        fqdn_listname: alpha@example.com
        http_etag: ...
        role: member
        self_link: http://localhost:9001/3.0/members/5
        user: http://localhost:9001/3.0/users/2
    entry 3:
        address: cperson@example.com
        fqdn_listname: test-one@example.com
        http_etag: ...
        role: owner
        self_link: http://localhost:9001/3.0/members/6
        user: http://localhost:9001/3.0/users/2
    entry 4:
        address: aperson@example.com
        fqdn_listname: test-one@example.com
        http_etag: ...
        role: member
        self_link: http://localhost:9001/3.0/members/3
        user: http://localhost:9001/3.0/users/3
    entry 5:
        address: bperson@example.com
        fqdn_listname: test-one@example.com
        http_etag: ...
        role: member
        self_link: http://localhost:9001/3.0/members/1
        user: http://localhost:9001/3.0/users/1
    entry 6:
        address: cperson@example.com
        fqdn_listname: test-one@example.com
        http_etag: ...
        role: member
        self_link: http://localhost:9001/3.0/members/2
        user: http://localhost:9001/3.0/users/2
    http_etag: "..."
    start: 0
    total_size: 7


Joining a mailing list
======================

A user can be subscribed to a mailing list via the REST API, either by a
specific address, or more generally by their preferred address.  A subscribed
user is called a member.

Elly subscribes to the alpha mailing list.  By default, get gets a regular
delivery.  Since Elly's email address is not yet known to Mailman, a user is
created for her.

    >>> dump_json('http://localhost:9001/3.0/members', {
    ...           'fqdn_listname': 'alpha@example.com',
    ...           'address': 'eperson@example.com',
    ...           'real_name': 'Elly Person',
    ...           })
    content-length: 0
    date: ...
    location: http://localhost:9001/3.0/members/8
    server: ...
    status: 201

Elly is now a member of the mailing list.
::

    >>> elly = user_manager.get_user('eperson@example.com')
    >>> elly
    <User "Elly Person" (...) at ...>

    >>> set(member.mailing_list for member in elly.memberships.members)
    set([u'alpha@example.com'])

    >>> dump_json('http://localhost:9001/3.0/members')
    entry 0:
    ...
    entry 3:
        address: eperson@example.com
        fqdn_listname: alpha@example.com
        http_etag: ...
        role: member
        self_link: http://localhost:9001/3.0/members/8
        user: http://localhost:9001/3.0/users/5
    ...


Leaving a mailing list
======================

Elly decides she does not want to be a member of the mailing list after all,
so she leaves from the mailing list.
::

    # Ensure our previous reads don't keep the database lock.
    >>> transaction.abort()
    >>> dump_json('http://localhost:9001/3.0/members/8',
    ...           method='DELETE')
    content-length: 0
    ...
    status: 200

Elly is no longer a member of the mailing list.

    >>> set(member.mailing_list for member in elly.memberships.members)
    set([])


Digest delivery
===============

Fred joins the alpha mailing list but wants MIME digest delivery.
::

    >>> transaction.abort()
    >>> dump_json('http://localhost:9001/3.0/members', {
    ...           'fqdn_listname': 'alpha@example.com',
    ...           'address': 'fperson@example.com',
    ...           'real_name': 'Fred Person',
    ...           'delivery_mode': 'mime_digests',
    ...           })
    content-length: 0
    date: ...
    location: http://localhost:9001/3.0/members/9
    server: ...
    status: 201

    >>> fred = user_manager.get_user('fperson@example.com')
    >>> memberships = list(fred.memberships.members)
    >>> len(memberships)
    1
    >>> memberships[0]
    <Member: Fred Person <fperson@example.com>
             on alpha@example.com as MemberRole.member>
