=======
Domains
=======

    # The test framework starts out with an example domain, so let's delete
    # that first.
    >>> from mailman.interfaces.domain import IDomainManager
    >>> manager = IDomainManager(config)
    >>> manager.remove(u'example.com')
    <Domain example.com...>
    >>> commit()

The REST API can be queried for the set of known domains, of which there are
initially none.

    >>> dump_json('http://localhost:8001/3.0/domains')
    resource_type_link: https://localhost:8001/3.0/#domains
    start: None
    total_size: 0

Once a domain is added though, it is accessible through the API.

    >>> manager.add(u'example.com', u'An example domain',
    ...             u'http://lists.example.com')
    <Domain example.com, An example domain,
            base_url: http://lists.example.com,
            contact_address: postmaster@example.com>
    >>> commit()

    >>> dump_json('http://localhost:8001/3.0/domains')
    entry 0:
        base_url: http://lists.example.com
        contact_address: postmaster@example.com
        description: An example domain
        email_host: example.com
        http_etag: "..."
        resource_type_link: https://localhost:8001/3.0/#domain
        self_link: https://localhost:8001/3.0/domains/example.com
        url_host: lists.example.com
    resource_type_link: https://localhost:8001/3.0/#domains
    start: 0
    total_size: 1

At the top level, all domains are returned as separate entries.

    >>> manager.add(u'example.org',
    ...             base_url=u'http://mail.example.org',
    ...             contact_address=u'listmaster@example.org')
    <Domain example.org, base_url: http://mail.example.org,
            contact_address: listmaster@example.org>
    >>> manager.add(u'lists.example.net',
    ...             u'Porkmasters',
    ...             u'http://example.net',
    ...             u'porkmaster@example.net')
    <Domain lists.example.net, Porkmasters,
            base_url: http://example.net,
            contact_address: porkmaster@example.net>
    >>> commit()

    >>> dump_json('http://localhost:8001/3.0/domains')
    entry 0:
        base_url: http://lists.example.com
        contact_address: postmaster@example.com
        description: An example domain
        email_host: example.com
        http_etag: "..."
        resource_type_link: https://localhost:8001/3.0/#domain
        self_link: https://localhost:8001/3.0/domains/example.com
        url_host: lists.example.com
    entry 1:
        base_url: http://mail.example.org
        contact_address: listmaster@example.org
        description: None
        email_host: example.org
        http_etag: "..."
        resource_type_link: https://localhost:8001/3.0/#domain
        self_link: https://localhost:8001/3.0/domains/example.org
        url_host: mail.example.org
    entry 2:
        base_url: http://example.net
        contact_address: porkmaster@example.net
        description: Porkmasters
        email_host: lists.example.net
        http_etag: "..."
        resource_type_link: https://localhost:8001/3.0/#domain
        self_link: https://localhost:8001/3.0/domains/lists.example.net
        url_host: example.net
    resource_type_link: https://localhost:8001/3.0/#domains
    start: 0
    total_size: 3


Individual domains
==================

The information for a single domain is available by following one of the
self_links from the above collection.

    >>> dump_json('http://localhost:8001/3.0/domains/lists.example.net')
    base_url: http://example.net
    contact_address: porkmaster@example.net
    description: Porkmasters
    email_host: lists.example.net
    http_etag: "..."
    resource_type_link: https://localhost:8001/3.0/#domain
    self_link: https://localhost:8001/3.0/domains/lists.example.net
    url_host: example.net

But we get a 404 for a non-existent domain.

    >>> dump_json('http://localhost:8001/3.0/domains/does-not-exist')
    Traceback (most recent call last):
    ...
    HTTPError: HTTP Error 404: Not Found
