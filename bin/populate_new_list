#! /usr/bin/env python
#
# Copyright (C) 1998 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

"""Populate a mailman list with the addresses specified in files.

 - argv[1]: the list name.
 - argv[2]: the path to a file of non-digest user addresses
 - argv[3]: the path to a file of digest user addresses

The email address lists must not have comments or other fancy formatting -
just email addrs, one per line."""


import sys, os, crypt, string
import paths
from Mailman import MailList
from Mailman import Utils
from Mailman import Errors


def GetRandomPassword():
    return "%s%s" % (Utils.GetRandomSeed(), Utils.GetRandomSeed())

def main(argv):
    if len(argv) not in [3, 4]:
        print ('Usage: populate_new_list <list name> '
               '<non-digest-members-file> [ <digest-members-file> ]')
        sys.exit(0)

    try:
        list = MailList.MailList(sys.argv[1])
    except Errors.MMUnknownListError, msg:
        sys.stderr.write("list %s not found\n" % `argv[1]`)
        sys.exit(1)

    try:
        non_digest_members = string.split(open(sys.argv[2]).read(), '\n')
    except IOError:
        non_digest_members = []
        sys.stderr.write(
            'Failed open of non-digest members file, ignoring.')

    if len(argv) == 4:
        try:
            digest_members = string.split(open(sys.argv[3]).read(), '\n')
        except IOError:
            digest_members = []
            sys.stderr.write(
                'Failed open of digest members file, ignoring.')
    else:
        digest_members = []

    def FormatMembers(mbrs):
        def NotNull(str):
            return str
        return filter(NotNull, map(string.strip, mbrs))

    non_digest_members = FormatMembers(non_digest_members)
    digest_members = FormatMembers(digest_members)

    for member in non_digest_members:
        pw = GetRandomPassword()
        try:
            list.ApprovedAddMember(member, pw, 0)
            print "Regular member", member, "added"
        except Errors.MMAlreadyAMember:
            sys.stderr.write("%s: %s already a member\n" %
                             (list.real_name, member))

    for member in digest_members:
        pw = GetRandomPassword()
        try:
            list.ApprovedAddMember(member, pw, 1)
            print "Digest member", member, "added"
        except Errors.MMAlreadyAMember:
            sys.stderr.write("%s: %s already a member\n" %
                             (list.real_name, member))

if __name__ == "__main__":
    main(sys.argv)
