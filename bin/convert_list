#! /usr/bin/env python
#
# Copyright (C) 1998 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# argv[1] should be the name of the list.
# argv[2] should be the list of non-digested users.
# argv[3] should be the list of digested users.

# Make sure that the list of email addresses doesn't contain any comments,
# like majordomo may throw in.  For now, you just have to remove them manually.

"""Convert a list.

Usage:
    convert_list <list name> <non-digest-members-file> <digest-members-file>
"""

import sys
import os
import string
import paths
import Mailman.MailList
import Mailman.Utils
import Mailman.Message
import Mailman.mm_cfg


def usage(status, msg=''):
    if msg:
        print msgne
    print __doc__ % globals()
    sys.exit(status)


def GetRandomPassword():
    seed1 = Mailman.Utils.GetRandomPassword()
    seed2 = Mailman.Utils.GetRandomPassword()
    return "%s%s" % (seed1, seed2)


def SendExplanation(users):
    msg = Mailman.Message.OutgoingMessage()
    msg.SetSender(list.GetAdminEmail())
    dict = {'listname'    : list.real_name,
            'listhost'    : list.host_name,
            'listaddr'    : list.GetListEmail(),
            'listinfo_url': list.GetAbsoluteScriptURL('listinfo'),
            'requestaddr' : list.GetRequestEmail(),
            'adminaddr'   : list.GetAdminEmail(),
            'version'     : Mailman.mm_cfg.VERSION,
            }
    header = 'Big change in %(listname)s@%(listhost) mailing list' % dict
    msg.SetHeader('subject', header)
    msg.AppendToBody(Mailman.Utils.maketext('convert.txt', dict))
    list.DeliverToList(msg, users, None, None)


def main():
    if len(sys.argv) <> 4:
        usage(1)

    try:
        list = maillist.MailList(sys.argv[1])
    except:
        usage(1, 'You must first run: newlist ' + sys.argv[1])

try:
    non_digest_members = string.split(open(sys.argv[2]).read(), '\n')
except:
    non_digest_members = []
    print 'file for non-digest members could not be opened.  Ignoring.'
try:
    digest_members     = string.split(open(sys.argv[3]).read(), '\n')
except:
    digest_members = []
    print 'file for digest members could not be opened.  Ignoring.'

def FormatMembers(mbrs):
    def NotNull(str):
        return str
    return filter(NotNull, map(string.strip, mbrs))

non_digest_members = FormatMembers(non_digest_members)
digest_members     = FormatMembers(digest_members)


SendExplanation(non_digest_members + digest_members)

for member in non_digest_members:
    pw = GetRandomPassword()
    list.ApprovedAddMember(member, pw, 0)

for member in digest_members:
    pw = GetRandomPassword()
    list.ApprovedAddMember(member, pw, 1)
    
list.Unlock()

