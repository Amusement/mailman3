#! /usr/bin/env python

"""Check the permissions for the Mailman installation.

Usage: %(PROGRAM)s [-f] [-v] [-h]

With no arguments, just check and report all the files that have bogus
permissions or group ownership.  With -f (and run as root), fix all the
permission problems found.  With -v be verbose.

"""

import sys
import os
import errno
import getopt
import grp
from stat import *
import paths
from Mailman import mm_cfg

MAILMAN_GRPNAME = 'mailman'
MAILMAN_GID = grp.getgrnam(MAILMAN_GRPNAME)[2]

PROGRAM = sys.argv[0]



class State:
    FIX = 0
    VERBOSE = 0
    ERRORS = 0

STATE = State()



def statmode(path):
    return os.stat(path)[ST_MODE]

def statgidmode(path):
    stat = os.stat(path)
    return stat[ST_MODE], stat[ST_GID]

def checkwalk(arg, dirname, names):
    for name in names:
        path = os.path.join(dirname, name)
        if arg.VERBOSE:
            print 'checking gid and modes for', path
        try:
            mode, gid = statgidmode(path)
        except os.error, (code, msg):
            if code == errno.ENOENT:
                continue
            raise
        if gid <> MAILMAN_GID:
            arg.ERRORS = arg.ERRORS + 1
            print path, 'bad gid (has: %s, expected %s)' % (
                grp.getgrgid(gid)[0], MAILMAN_GRPNAME),
            if STATE.FIX:
                print '(fixing)'
                os.chown(path, -1, MAILMAN_GID)
            else:
                print
        # all directories must be setgid
        if S_ISDIR(mode) and not mode & S_ISGID:
            arg.ERRORS = arg.ERRORS + 1
            print path, 'directory is not setgid',
            if STATE.FIX:
                print '(fixing)'
                os.chmod(path, mode | S_ISGID)
            else:
                print

def checkall():
    # first check PREFIX
    mode = statmode(mm_cfg.PREFIX)
    perms = S_IRWXU | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH
    if (mode & perms) <> perms:
        STATE.ERRORS = STATE.ERRORS + 1
        print mm_cfg.PREFIX, 'must be at least 02755',
        if STATE.FIX:
            print '(fixing)'
            os.chmod(mm_cfg.PREFIX, mode | perms)
        else:
            print
    # check all subdirs
    os.path.walk(mm_cfg.PREFIX, checkwalk, STATE)


def checkarchives():
    private = mm_cfg.PRIVATE_ARCHIVE_FILE_DIR
    if STATE.VERBOSE:
        print 'checking perms on', private
    # private archives must not be other readable
    mode = statmode(private)
    if mode & S_IROTH:
        STATE.ERRORS = STATE.ERRORS + 1
        print private, 'must not be other-readable',
        if STATE.FIX:
            print '(fixing)'
            os.chmod(private, mode & ~S_IROTH)
        else:
            print


def checkarchivedbs():
    # The archives/private/listname/database file must not be other readable
    # or executable otherwise those files will be accessible when the archives
    # are public.  That may not be a horrible breach, but let's close this off
    # anyway.
    for dir in os.listdir(mm_cfg.PRIVATE_ARCHIVE_FILE_DIR):
        if dir[-5:] == '.mbox':
            continue
        dbdir = os.path.join(mm_cfg.PRIVATE_ARCHIVE_FILE_DIR, dir, 'database')
        try:
            mode = statmode(dbdir)
        except os.error, (code, msg):
            if code == ENOENT:
                continue
            raise
        if mode & S_IRWXO:
            STATE.ERRORS = STATE.ERRORS + 1
            print dbdir, 'must be other 000',
            if STATE.FIX:
                print '(fixing)'
                os.chmod(dbdir, mode & ~S_IRWXO)
            else:
                print


def checkcgi():
    exes = os.listdir(mm_cfg.CGI_DIR)
    for f in exes:
        path = os.path.join(mm_cfg.CGI_DIR, f)
        if STATE.VERBOSE:
            print 'checking set-gid for', path
        mode = statmode(path)
        if mode & S_IXGRP and not mode & S_ISGID:
            STATE.ERRORS = STATE.ERRORS + 1
            print path, 'must be set-gid',
            if STATE.FIX:
                print '(fixing)'
                os.chmod(path, mode | S_ISGID)
            else:
                print

def checkmail():
    wrapper = os.path.join(mm_cfg.WRAPPER_DIR, 'wrapper')
    if STATE.VERBOSE:
        print 'checking set-gid for', wrapper
    mode = statmode(wrapper)
    if not mode & S_ISGID:
        STATE.ERRORS = STATE.ERRORS + 1
        print wrapper, 'must be set-gid',
        if STATE.FIX:
            print '(fixing)'
            os.chmod(wrapper, mode | S_ISGID)

def checkadminpw():
    adminpw = os.path.join(mm_cfg.DATA_DIR, 'adm.pw')
    targetmode = S_IFREG | S_IRUSR | S_IWUSR | S_IRGRP
    if STATE.VERBOSE:
        print 'checking perms on', adminpw
    try:
        mode = statmode(adminpw)
    except os.error, (code, msg):
        # adm.pw may not exist
        if code == errno.ENOENT:
            return
        raise
    if mode <> targetmode:
        STATE.ERRORS = STATE.ERRORS + 1
        print adminpw, 'permissions must be exactly 0640 (got %s)' % oct(mode)
        if STATE.FIX:
            print '(fixing)'
            os.chmod(adminpw, targetmode)


def usage(code=0, msg=''):
    print __doc__ % globals()
    if msg:
        print msg
    sys.exit(code)


if __name__ == '__main__':
    try:
        opts, args = getopt.getopt(sys.argv[1:],
                                   'fvh',
                                   ['fix', 'verbose', 'help'])
    except getopt.error, msg:
        usage(1, msg)

    for opt, arg in opts:
        if opt in ('-h', '--help'):
            usage()
        elif opt in ('-f', '--fix'):
            STATE.FIX = 1
        elif opt in ('-v', '--verbose'):
            STATE.VERBOSE = 1

    checkall()
    checkarchives()
    checkarchivedbs()
    checkcgi()
    checkmail()
    checkadminpw()

    if not STATE.ERRORS:
        print 'No problems found'
    else:
        print 'Problems found:', STATE.ERRORS
        print 'Re-run as root with -f flag until no errors are found'
