#! /usr/bin/env python
#
# Copyright (C) 2001 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

"""Regenerate Postfix's data/aliases and data/aliases.db files from scratch.

Usage:

    genaliases [options]

Options:

    -h/--help
        Print this message and exit.
"""

import sys
import getopt
import dbhash
import fcntl

import paths                                      # path hacking
from Mailman import Utils
from Mailman import MailList
from Mailman.MTA import Postfix
from Mailman.i18n import _



def usage(code, msg=''):
    print >> sys.stderr, _(__doc__)
    if msg:
        print >> sys.stderr, msg
    sys.exit(code)



def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'h', ['help'])
    except getopt.error, msg:
        usage(1, msg)

    for opt, arg in opts:
        if opt in ('-h', '--help'):
            usage(0)

    if args:
        usage(1)

    # Open the text file and dbhash files, truncating any data already there.
    # We need to acquire a lock so nobody tries to update the files while
    # we're doing it.
    lock = Postfix.makelock()
    lock.lock()
    lockfp = None
    try:
        # Overwrite the current file contents, since we're going to be adding
        # all new entries.  See the discussion in Mailman/MTA/Postfix.py for
        # why we do the locking this way.
        lockfp = open(Postfix.DBFILE, 'w')
        fcntl.flock(lockfp.fileno(), fcntl.LOCK_EX)
        db = dbhash.open(Postfix.DBFILE, 'n')
        fp = open(Postfix.TEXTFILE, 'w')
        for listname in Utils.list_names():
            mlist = MailList.MailList(listname, lock=0)
            Postfix.addlist(mlist, db, fp)
        db.sync()
        fp.close()
    finally:
        if lockfp:
            fcntl.flock(lockfp.fileno(), fcntl.LOCK_UN)
            lockfp.close()
        lock.unlock(unconditionally=1)



if __name__ == '__main__':
    main()
