Mailman - The GNU Mailing List Management System
Copyright (C) 1998 Free Software Foundation, Inc.
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA

This file contains installation instructions.  Mailman is configured
using the standard GNU autoconf software.  You should first set up
your system as outlined in the sections below, and then configure and
install the Mailman software.

UPGRADING:

Generally one can follow the below directions, giving the location of
the old install as the target directory, and the upgrade will happen
transparently.  However, please note the following exceptions:

    - If upgrading from version 1.0b4 or earlier, templates need to be
    moved.  For each list, move $prefix/templates/<listname>/* to
    $prefix/lists/<listname>.  Be careful about stomping template
    changes that your list managers have changed!  (Only the
    options.html template changed from 1.0b5 to 1.0b6.)

0. Installation requirements

    You must have the Python interpreter installed somewhere on your
    system.  Currently Python 1.5 or later is required.  For
    information about obtaining Python source code, or pre-compiled
    binaries please see the Python Web site at

        <http://www.python.org/>

    You must also have a C compiler in order to build the wrapper
    programs which are used for improved security.  The GNU C compiler 
    gcc 2.8.1 is known to work well.  For more information about
    obtaining gcc, see

        <http://www.gnu.org/>

1. System setup

    You will need to be root to perform the steps in this section.

    Before installing the Mailman software, you need to prepare your
    system by adding certain users and groups.

    - Add a new user called `mailman'.  Typically this is added to
      your /etc/passwd file.  One Mailman program will be installed
      with the set-user-id bit set (see below).

    - Add a new group called `mailman'.  Typically this is added to
      your /etc/group file.  The Mailman files will be installed under
      the `mailman' group, with the set-group-id bit.  This is so both 
      the Web based and mail based programs will have the proper write 
      permissions.

    - Create an installation directory (called $prefix in the
      documentation that follows).  All of the Mailman files will be
      installed under $prefix.

      Note that if you've added a mailman user, and plan to install to
      the default location (/home/mailman), that directory may have
      already been made for you.

      Make sure this directory is set to group `mailman' and has the
      group sticky bit set.  You probably also want to guarantee that
      this directory is read and executeable by everyone. For example,
      these shell commands will accomplish this:

          % cd $prefix
          % chgrp mailman .
          % chmod a+rx,g+s .

      You are now ready to configure and install the Mailman software.

2. Running configure

    You do not need to be root to perform the steps in the section.
    Do them under your own login, or whatever account you typically
    install software as.  However, make sure that you have write
    permissions to the target installation directory, and permission
    to create a setgid file in the file system where it resides (NFS
    and other mounts can be configured to inhibit setgid settings).

    - If you've installed other GNU software, you should be familar
      with the configure script.  Usually you can just cd to the
      directory you unpacked Mailman into, and run configure with no
      arguments:

          % cd <mailman-src-dir>
          % ./configure

      and then run `make install'.  The following options allow you to
      customize your Mailman installation.

      --prefix=dir
            Standard GNU configure option which changes the base
            directory that Mailman is installed into.  By default
            $prefix is /home/mailman.  This directory must already
            exist, and be set up as described in section 1 above.

      --exec_prefix=dir
            Standard GNU configure option which lets you specify a
            different installation directory for architecture
            dependent binaries.

      --with-python=</path/to/python>
            Specify an alternative Python interpreter to use for the
            wrapper programs.  The default is to use the interpreter
            found first on your shell's $PATH.  Note that when running
            the scripts from the command line, the first Python
            interpreter found on $PATH is always used.

      --with-mail-gid=<group-or-groups>
            Specify an alternative group for running scripts via the
            mail wrapper.  <group-or-groups> can be a list of one or
            more integer group ids or symbolic group names.  The first
            value in the list that resolves to an existing group is
            used.  By default, the value is the list `other daemon'.

            This is highly system dependent and you must get this
            right, because the group id is compiled into the mail
            wrapper program for added security.  On systems using
            sendmail, check your sendmail.cf file to see what group it
            runs programs as.

      --with-cgi-gid=<group-or-groups>
            Specify an alternative group for running scripts via the
            CGI wrapper.  <group-or-groups> can be a list of one or
            more integer group ids or symbolic group names.  The first
            value in the list that resolves to an existing group is
            used.  By default, the value is the the list `www www-data
            nobody'.

            The proper value for this is dependent on your Web server
            configuration, and you must get this right, because the
            group id is compiled into the CGI wrapper program for
            added security.  On system using Apache for example, check
            the values for the `Group' option in your httpd.conf file.

      --with-cgi-ext=<extension>
            Specify an extension for cgi-bin programs.  The CGI
            wrappers placed in $PREFIX/cgi-bin will have this
            extension (some Web servers require an extension).
            <extension> must include the dot.

      --with-gcc=no
            Don't use gcc, even if it is found.  `cc' must be found on
            your $PATH

    - Run `make install'

3. Finishing the install

    The final installation step requires you to be root.  In order to
    provide security for private Pipermail archives, the CGI wrapper
    program $prefix/cgi-bin/private must be owned by the mailman user, 
    and it must have the set-user-id bit set.

    As root, run `make finish'.

4. Final system set-up

    Congratulations!  You've installed the Mailman software.  To get
    everything running you need to hook Mailman up to both your Web
    server and your mail system.

    - Configure your Web server to give $prefix/cgi-bin permission to
      run CGI scripts, and restart your Web server.  You probably need 
      to be root to do this.

      The line you should add might look something like the following
      (with the real absolute directory substituted for $prefix, of
      course):

          Exec          /mailman/*      $prefix/cgi-bin/*
      or:
          ScriptAlias   /mailman/       $prefix/cgi-bin/

      Consult your Web server's documentation for details.

    - Configure your Web server to point to the Pipermail public
      mailing list archives:

      For example, in Apache:

         Alias /pipermail/ $prefix/public_html/archives/

      Consult your Web server's documentation for details.

    - Set up the crontab entries.  Mailman runs a number of cron jobs
      to do things such as send out password reminders, etc.  You need
      to be user `mailman' to perform this step.  Add
      $prefix/cron/crontab.in as a crontab entry by executing these
      commands:

          % su - mailman
          % cd $prefix/cron
          % crontab crontab.in

    - Add aliases for `mailman' and `owner-mailman' to the system's
      mail alias database.  These aliases should point to whoever is
      ultimately responsible for the Mailman installation.  Here are
      instructions for those running sendmail:

          1. su to root.
          2. Assuming your email is fred@flintstone.com, add the following
             lines to the file /etc/aliases:
 
             mailman: fred@flintstone.com
             mailman-owner: mailman

          3. Some versions of sendmail require you to run the program
             'newaliases' explicitly.

      If you don't run sendmail, consult the documentation of your
      mail transport program for information on adding these aliases.

4. Customize Mailman

    You should do these steps using the account you installed Mailman
    under in section 2 above.

    - Check the file $prefix/Mailman/mm_cfg.py for accuracy.
      Specifically check to make sure the variables DEFAULT_HOST_NAME
      and DEFAULT_URL are correct, and make any necessary changes.

      The variable settings in mm_cfg.py override those in
      $prefix/Mailman/Defaults.py, so consult that file for the list
      of variables that control Mailman.  Add any additonal settings
      that you want to change for your site to mm_cfg.py (don't edit
      Defaults.py).

      The install process will not overwrite an existing mm_cfg.py
      file so you can freely make changes to this file.  Installing
      will always copy the automatically generated mm_cfg.py file to
      $prefix/Mailman/mm_cfg.py.dist so you can check that file for
      any useful differences or suggestions.

      Note: Do *not* change HOME_DIR or MAILMAN_DIR.  These are set
      automatically by the configure script.

    - Create the site password using:

        % $prefix/bin/mmsitepass <your-site-password>

5. Getting started

    - Create a list named `test'.  To do so, run the program
      $prefix/bin/newlist.  You will be prompted for the name of the
      list, as well as the email address of the person running the
      list.  Put your own email address as the list administrator's
      address.
       
    - Running newlist will generate a list of aliases that must be
      added to the system.  If you are running Sendmail, you may add
      the lines output directly to the file /etc/aliases.  You may
      need to run the command 'newaliases' (all as root).  Now the
      mailing address for your list as well as its administrative
      addresses will be set up.  If you are not running Sendmail,
      consult your MTA's documentation for information on adding
      aliases.

    - You will receive email instructions on how to visit the list you
      just created.  Using these instructions, subscribe to the
      mailing list.  Once you have subscribed (which requires a
      confirmation step!), send a message to the list, and see if you
      get it.  If so, then you have successfully installed Mailman,
      and set up your first list!


6. Troubleshooting
  
    If you encounter problems with running Mailman, first check the
    "Common Problems" section, below.  If your problem is not covered
    there, then check for a log entry from Mailman in your syslog.
    
    Where syslog lives on your particular machine may vary.  It may be
    in /var/log/maillog.  It may also be in /var/log/syslog.  On many
    machines, syslog files live in /adm/log/ instead of /var/log.

    If you encounter an error, send an error report to
    mailman-users@python.org.  Include a description of what you're
    doing to cause the problem, and the relevant lines from your
    syslog.  Also include information on your operating system and
    version of Python.

7. Common Problems

    Problem:  All Mailman web pages give a 404 File not found error.

    Solution: Your web server has not been set up properly for handling
              Mailman's cgi commands.  Make sure you've:

              1) Configured the web server to give permissions to
                 $prefix/cgi-bin
              2) Restarted the web server properly.

              Consult your web server's documentation for instructions
              on how to do these things.


    Problem:  All Mailman web pages give an "Internal Server Error".

    Solution: The likely problem is that you are using the wrong GID or 
              UID for CGI scripts.  Check your syslog.  If you see, for
              example, a line like: 

                  Attempt to exec script with invalid gid 51, expected 99

              You need to reinstall Mailman, and specify $CGI_GID to be 51,
              as described in the installation instructions.


    Problem:  I send mail to the list, and get back mail saying the
              list is not found!

    Solution: You probably didn't add the necessary aliases to the system
              alias database, given to you when you ran the newlist
              command.  If you did add them, you likely did not update
              the alias database, or your system requires you to run
              newaliases explicitly.  Refer to section 5 above for
              more information.


    Problem:  I send mail to the list, and get back mail saying,
              "unknown mailer error".

    Solution: The likely problem is that you are using the wrong GID or 
              UID for mail.  Check your syslog.  If you see, for
              example, a line like:

                  Attempt to exec script with invalid gid 51, expected 99

              You need to reinstall Mailman, and specify $MAIL_GID to
              be 51, as described in the installation instructions.

    Problem:  I send mail to the list, and get back mail saying,
              "sh: wrapper not available for sendmail programs"

    Solution: Your system uses sendmail restricted shell.  You need to
              configure smrsh by creating a symbolic link from the mail
              wrapper ($prefix/mail/wrapper) to either /var/admin/sm.bin 
              or /usr/admin/sm.bin.  Note that on Debian linux, the system
              makes /usr/lib/sm.bin, which is wrong, you will need to create
              the directory /usr/admin/sm.bin and add the link there.
              NOTE: any aliases newaliases spits out will need to be
              adjusted to point to the secure link to the wrapper.

    Problem:  I messed up when I called configure.  How do I clean
              things up and re-install?

    Solution: % make clean
              % ./configure --with-the-right-options
              % make install




Local Variables:
mode: indented-text
indent-tabs-mode: nil
End:
