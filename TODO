TODO for mailman 1.0b2 (TODO $Revision: 451 $, $Date: 1998-04-13 21:15:48 +0100 (Mon, 13 Apr 1998) $)

This document is by no means up to date, sorry.

For after v 1.0b2:
------------
Pending bugs
------------
 - Mime digests a bit feeble - postings containing mime attachments
   not properly handled
 - Bounce processing
   - Turning off bounce processing doesn't?
   - Turning on non-member-post exclusion doesn't
   - More generally mm_utils.AddressesMatch() needs to be really
     thought out.  For instance, klm@python.org vs klm@acm.org should
     be seen as different, but klm@parrot.python.org and
     klm@larch.python.org and klm@python.org should probably be seen
     as the same.  There may be more criteria...
 - Bounces of the confirmation notices sent to people attempting
   web-based subscriptions are, necessarily, directed (via reply-to
   header) to maillist-request addr, and get mishandled there as
   unrecognized requests.  Not sure how to solve this one short of
   recognizing bad subscriber addrs before sending out the notice.
-------------------------------
Pending Developments and Issues
-------------------------------
  Some modest Pending Refinements:
 - Use re module everywhere instead of regexp and regsub.
 - Implement a reasonable administrivia filter for lists (but less
   likely to misfire than majordomo's) (administrivia is, eg,
   unsubscribe request mistakenly sent to list posting addr)
 - Refine any unqualified exception guards to specify target exceptions.
 - Turn standard mailman exceptions into class exceptions.
 - Implement cookies (with moderate lifetimes) for user and admin passwords.
 - Unravel edit-options functionality from cgi/subscribe script - give 
   edit-options a script of its own.  (Not imperative, maybe when the
   bigger project of implementing member profiles is done.)
 - Relax constraint that everything be installed in /home/mailman.
   (I'll probably do this for the next release.  We can probably use
   relative paths for most things, particularly the routine sys.path
   setting in all the python code, and possibly for the wrappers.)
 - Foolproof list deletion (bin/rmlist) a bit by asking for password
   (and have list admin or site password work).
 - Should member deletion be confirmed with email?
 - Submission of edited user options should return to edit-options
   page, like admin options pages do.
 - People mass subscribed on admin form should not require approval,
   even for closed-subscribe lists.
Some bigger Pending Projects
 - User and Admin Guides - HOWTOs
 - Developers guide - documentation
 - Implement email interface to admin commands.
 - Implement a 'which' mailcmd.  (Probably not hard!  May be good intro
   project for someone wading into mailman development.)
 - Put the admin interface and other things like private subscriber rosters
   *behind* passwords, like the private archives are.  Eg, instead of
   putting the password box on the listinfo form, have it always be just
   a regular link to the roster, but then the roster page would be a
   password page if the roster is private and there's no cookie for it.
 - Generalize and refine admindb so that pending bounces,
   subscriptions, etc are stored in the filesystem, nicely catalogued, 
   and the interfaces for handling them (eg, admindb) shows succinct
   summaries, with links to see the entire things.  (I may work on this.)
 - Develop subscription mechanisms so real confirmation happens, and
   use that as basis for option to change existing subscription
   delivery address.  (Scott cotton is working on this.)
 - Deliver by connect to SMTP 25 instead of sendmail.  (I'm checking
   in modules/smtplib.py module john's played with some.)
 - Robustify aliases handling to not just append entries if they
   already exist, and ideally, edit existing ones if they need to change.
 - Implement a real admin/membership-management section, that includes 
   includes hidden subscribers, provides easy perusal and changing of
   all members (including concealed members) status, including
   disabling or removal from list.
 - Implement some automated validation of installation - check for
   obvious problems with options settings, file access permissions,
   sendmail hookup, etc.
 ? Have an implicit list-managers list for every site, which includes
   all the list managers?
 - Make listinfo page static, regenerated every time admin options are 
   changed.  This will speed up and reduce load for listinfo page
   loading.
More Fundamental, or just more bigger:), Pending Projects
 - Refine locking to only necessary sections, so there's less room for 
   unnecessary contention.
 - Implement the system as a persistent server.  (John's planning to
   do this.)
 - Implement member profiles, using a class.  For name, organization,
   description, etc, and defaults options settings.  The lists,
   themselves, could still have copies of the specific passwords and
   the compact bitmaps (for the sake of efficiency) for list-specific
   options like digest/nondigest, but the user could set their default
   choices - delivery address, password, delivery mode - in their
   profile.

===================================================================
For v .96:
o Add more bounce patterns....
o Confirmation when you change anything...
o Fix what new list mail has to say.
o Link from subscribe to options
o Edit posts from admindb page
o Make who, info, etc... take list as an optional argument.
o subject in caps
o headers on approve should die
o link to other lists, have a global page of lists on this server...
o ordering of post requests
o first time bounce on stale addr problem.
o link from subscribe page to options page
For the near future:
o Make these filter functions live together in self.
o Lower case all cmds in mailcmd
o Does admin password work for mail cmds?
o Occasionally remove stale bounce entries
o lower case all names?
o Remove the bounce log.
o Implement the option to mail admin instead of auto-removing...
o Send mail to the guy when you forcefully unsubscribe him... (IE, through bounce management)
o Automatically insert a crontab entry to update the archives of a new list.
o mkdigest command for cron, plus over the web button.
o Search engine for archives
o Month annotations?
o Logging -- remove all tmp logs.  
o Generic error template
o Go over code looking for dead functions / code (esp mm_html funcs)
o Mailman web pages / documentation
o The config program
o remove/fix valid_parent check in wrappers
o Catch common commands in mail...
o md5 checksums to prevent mail loops (how will this work?)
o For archives, perhaps switch to every n months?
o Receive Non-Mail Files
o If you don't crush by default, you get 2 subject lines...
o Clean up the code.

For the Mailman home page:
o What are digests?
o What does option XXX mean?
o How about removing a list?
o Document what tags you can use on each web page when editing html.
	-- Add links to the right pages.

The Config program:
o Remember to:
	-- trusted user the mailman (how about smail users?)
	-- Mail to mailman should go to server owner
	-- add Cw entries (smail users?)
o chmod o+x all these scripts in install.
o Hook up cron scripts as part of install. 
o Need to make sure that all paths used in code and the #! lines get updated
	  by the config process.
o Add mailman and mailman-owner users.
o Notification on subscribes / unsubscribes


####################################

Potential stuff for future versions:
o Configurable logging?
o Make it be a client-server thing, instead of reloading list info every time 
	some program wants to perform an operation on a list.
o Make the web page / list man stuff machine independant (Will require the
  client/server deal).
o Make the tag stuff accept arguments.
o New list -- prevent posting option
o precidence header
o Administrivia a la majordomo?
o Approval not over the web. (A by-mail interface to the admin stuff)
o Newsgroups gateway
o Global mailing list services:
	-- bit saying whether we've notified the main server.
	-- support for periodic confirmations.
	-- pass on stats.






