Users
=====

Users are entities that represent people.  A user has a real name and a
password.  Optionally a user may have some preferences and a set of addresses
they control.

See usermanager.txt for examples of how to create, delete, and find users.

    >>> from Mailman.database import flush
    >>> from Mailman.configuration import config
    >>> mgr = config.user_manager


User data
---------

Users may have a real name and a password.

    >>> user = mgr.create_user()
    >>> user.password = 'my password'
    >>> user.real_name = 'Zoe Person'
    >>> flush()
    >>> sorted(user.real_name for user in mgr.users)
    ['Zoe Person']
    >>> sorted(user.password for user in mgr.users)
    ['my password']

The password and real name can be changed at any time.

    >>> user.real_name = 'Zoe X. Person'
    >>> user.password = 'another password'
    >>> flush()
    >>> sorted(user.real_name for user in mgr.users)
    ['Zoe X. Person']
    >>> sorted(user.password for user in mgr.users)
    ['another password']


Users addresses
---------------

One of the pieces of information that a user links to is a set of email
addresses, in the form of IAddress objects.  A user can control many
addresses, but addresses may be control by only one user.

Given a user and an address, you can link the two together.

    >>> roster = mgr.get_roster('')
    >>> address = roster.create('aperson@example.com', 'Anne Person')
    >>> user.link(address)
    >>> flush()
    >>> sorted(address.address for address in user.addresses)
    ['aperson@example.com']

But don't try to link an address to more than one user.

    >>> another_user = mgr.create_user()
    >>> another_user.link(address)
    Traceback (most recent call last):
    ...
    AddressAlreadyLinkedError: Anne Person <aperson@example.com>

You can also ask whether a given user controls a given address.

    >>> user.controls(address)
    True
    >>> not_my_address = roster.create('bperson@example.com', 'Ben Person')
    >>> user.controls(not_my_address)
    False

Given a text email address, the user manager can find the user that controls
that address.

    >>> mgr.get_user('aperson@example.com') is user
    True
    >>> mgr.get_user('bperson@example.com') is None
    True

Addresses can also be unlinked from a user.

    >>> user.unlink(address)
    >>> user.controls(address)
    False
    >>> mgr.get_user('aperson@example.com') is None
    True

But don't try to unlink the address from a user it's not linked to.

    >>> user.unlink(address)
    Traceback (most recent call last):
    ...
    AddressNotLinkedError: Anne Person <aperson@example.com>
    >>> another_user.unlink(address)
    Traceback (most recent call last):
    ...
    AddressNotLinkedError: Anne Person <aperson@example.com>
    >>> mgr.delete_user(another_user)


Users and profiles
------------------

Users always have a default profile.

    >>> from Mailman.interfaces import IProfile
    >>> IProfile.providedBy(user.profile)
    True

A profile is a set of preferences such as whether the user wants to receive an
acknowledgment of all of their posts to a mailing list...

    >>> user.profile.acknowledge_posts
    False

...whether the user wants to hide their email addresses on web pages and in
postings to the list...

    >>> user.profile.hide_address
    True

...the language code for the user's preferred language...

    >>> user.profile.preferred_language
    'en'

...whether the user wants to receive the list's copy of a message if they are
explicitly named in one of the recipient headers...

    >>> user.profile.receive_list_copy
    True

...whether the user wants to receive a copy of their own postings...

    >>> user.profile.receive_own_postings
    True

...and the preferred delivery method.

    >>> print user.profile.delivery_mode
    DeliveryMode.regular
