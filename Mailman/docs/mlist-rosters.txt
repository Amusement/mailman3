Mailing list rosters
====================

Mailing lists use rosters to manage and organize users for various purposes.
In order to allow for separate storage of mailing list data and user data, the
connection between mailing list objects and rosters is indirect.  Mailing
lists manage roster names, and these roster names are used to find the rosters
that contain the actual users.


Privileged rosters
------------------

Mailing lists have two types of privileged users, owners and moderators.
Owners get to change the configuration of mailing lists and moderators get to
approve or deny held messages and subscription requests.

When a mailing list is created, it automatically contains a roster for the
list owners and a roster for the list moderators.

    >>> from Mailman.database import flush
    >>> from Mailman.configuration import config
    >>> mlist = config.list_manager.create('_xtest@example.com')
    >>> flush()
    >>> sorted(roster.name for roster in mlist.owner_rosters)
    ['_xtest@example.com owners']
    >>> sorted(roster.name for roster in mlist.moderator_rosters)
    ['_xtest@example.com moderators']

These rosters are initially empty.

    >>> owner_roster = list(mlist.owner_rosters)[0]
    >>> sorted(address for address in owner_roster.addresses)
    []
    >>> moderator_roster = list(mlist.moderator_rosters)[0]
    >>> sorted(address for address in moderator_roster.addresses)
    []

You can create new rosters and add them to the list of owner or moderator
rosters.

    >>> roster_1 = config.user_manager.create_roster('roster-1')
    >>> roster_2 = config.user_manager.create_roster('roster-2')
    >>> roster_3 = config.user_manager.create_roster('roster-3')
    >>> flush()

Make roster-1 an owner roster, roster-2 a moderator roster, and roster-3 both
an owner and a moderator roster.

    >>> mlist.add_owner_roster(roster_1)
    >>> mlist.add_moderator_roster(roster_2)
    >>> mlist.add_owner_roster(roster_3)
    >>> mlist.add_moderator_roster(roster_3)
    >>> flush()

    >>> sorted(roster.name for roster in mlist.owner_rosters)
    ['_xtest@example.com owners', 'roster-1', 'roster-3']
    >>> sorted(roster.name for roster in mlist.moderator_rosters)
    ['_xtest@example.com moderators', 'roster-2', 'roster-3']


Privileged users
----------------

Rosters are the lower level way of managing owners and moderators, but usually
you just want to know which users have owner and moderator privileges.  You
can get the list of such users by using different attributes.

Because the rosters are all empty to start with, we can create a bunch of
users that will end up being our owners and moderators.

    >>> aperson = config.user_manager.create_user()
    >>> bperson = config.user_manager.create_user()
    >>> cperson = config.user_manager.create_user()

These users need addresses, because rosters manage addresses.

    >>> address_1 = roster_1.create('aperson@example.com', 'Anne Person')
    >>> aperson.link(address_1)
    >>> address_2 = roster_2.create('bperson@example.com', 'Ben Person')
    >>> bperson.link(address_2)
    >>> address_3 = roster_1.create('cperson@example.com', 'Claire Person')
    >>> cperson.link(address_3)
    >>> roster_3.addresses.append(address_3)
    >>> flush()

Now that everything is set up, we can iterate through the various collections
of privileged users.  Here are the owners of the list.

    >>> from Mailman.interfaces import IUser
    >>> addresses = []
    >>> for user in mlist.owners:
    ...     assert IUser.providedBy(user), 'Non-IUser owner found'
    ...     for address in user.addresses:
    ...         addresses.append(address.address)
    >>> sorted(addresses)
    ['aperson@example.com', 'cperson@example.com']

Here are the moderators of the list.

    >>> addresses = []
    >>> for user in mlist.moderators:
    ...     assert IUser.providedBy(user), 'Non-IUser moderator found'
    ...     for address in user.addresses:
    ...         addresses.append(address.address)
    >>> sorted(addresses)
    ['bperson@example.com', 'cperson@example.com']

The administrators of a mailing list are the union of the owners and
moderators.

    >>> addresses = []
    >>> for user in mlist.administrators:
    ...     assert IUser.providedBy(user), 'Non-IUser administrator found'
    ...     for address in user.addresses:
    ...         addresses.append(address.address)
    >>> sorted(addresses)
    ['aperson@example.com', 'bperson@example.com', 'cperson@example.com']
