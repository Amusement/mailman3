The message store
=================

The message store is a collection of messages keyed off of unique global
identifiers.  A global id for a message is calculated relative to the message
store's base URL and its components are stored as headers on the message.  One
piece of information is the X-List-ID-Hash, a base-32 encoding of the SHA1
hash of the message's Message-ID header, which the message must have.  The
second piece of information is supplied by the message store; it is a sequence
number that will uniquely identify the message even when the X-List-ID-Hash
collides.

    >>> from Mailman.configuration import config
    >>> store = config.db.message_store

If you try to add a message to the store which is missing the Message-ID
header, you will get an exception.

    >>> msg = message_from_string("""\
    ... Subject: An important message
    ...
    ... This message is very important.
    ... """)
    >>> store.add(msg)
    Traceback (most recent call last):
    ...
    ValueError: Exactly one Message-ID header required

However, if the message has a Message-ID header, it can be stored.

    >>> msg['Message-ID'] = '<87myycy5eh.fsf@uwakimon.sk.tsukuba.ac.jp>'
    >>> store.add(msg)
    1
    >>> print msg.as_string()
    Subject: An important message
    Message-ID: <87myycy5eh.fsf@uwakimon.sk.tsukuba.ac.jp>
    X-List-ID-Hash: AGDWSNXXKCWEILKKNYTBOHRDQGOX3Y35
    X-List-Sequence-Number: 1
    <BLANKLINE>
    This message is very important.
    <BLANKLINE>


Finding messages
----------------

There are several ways to find a message given some or all of the information
created above.  Because Message-IDs are not guaranteed unique, looking up
messages with that key resturns a collection.  The collection may be empty if
there are no matches.

    >>> list(store.get_messages_by_message_id(u'nothing'))
    []

Given an existing Message-ID, all matching messages will be found.

    >>> msgs = list(store.get_messages_by_message_id(msg['message-id']))
    >>> len(msgs)
    1
    >>> print msgs[0].as_string()
    Subject: An important message
    Message-ID: <87myycy5eh.fsf@uwakimon.sk.tsukuba.ac.jp>
    X-List-ID-Hash: AGDWSNXXKCWEILKKNYTBOHRDQGOX3Y35
    X-List-Sequence-Number: 1
    <BLANKLINE>
    This message is very important.
    <BLANKLINE>

Similarly, we can find messages by the ID hash.

    >>> list(store.get_messages_by_hash('nothing'))
    []
    >>> msgs = list(store.get_messages_by_hash(msg['x-list-id-hash']))
    >>> len(msgs)
    1
    >>> print msgs[0].as_string()
    Subject: An important message
    Message-ID: <87myycy5eh.fsf@uwakimon.sk.tsukuba.ac.jp>
    X-List-ID-Hash: AGDWSNXXKCWEILKKNYTBOHRDQGOX3Y35
    X-List-Sequence-Number: 1
    <BLANKLINE>
    This message is very important.
    <BLANKLINE>

We can also get a single message by using it's relative global ID.  This
returns None if there is no match.

    >>> print store.get_message('nothing')
    None
    >>> print store.get_message('nothing/1')
    None
    >>> id_hash = msg['x-list-id-hash']
    >>> seqno = msg['x-list-sequence-number']
    >>> global_id = id_hash + '/' + seqno
    >>> print store.get_message(global_id).as_string()
    Subject: An important message
    Message-ID: <87myycy5eh.fsf@uwakimon.sk.tsukuba.ac.jp>
    X-List-ID-Hash: AGDWSNXXKCWEILKKNYTBOHRDQGOX3Y35
    X-List-Sequence-Number: 1
    <BLANKLINE>
    This message is very important.
    <BLANKLINE>


Iterating over all messages
---------------------------

The message store provides a means to iterate over all the messages it
contains.

    >>> msgs = list(store.messages)
    >>> len(msgs)
    1
    >>> print msgs[0].as_string()
    Subject: An important message
    Message-ID: <87myycy5eh.fsf@uwakimon.sk.tsukuba.ac.jp>
    X-List-ID-Hash: AGDWSNXXKCWEILKKNYTBOHRDQGOX3Y35
    X-List-Sequence-Number: 1
    <BLANKLINE>
    This message is very important.
    <BLANKLINE>


Deleting messages from the store
--------------------------------

The global relative ID is the key into the message store.  If you try to
delete a global ID that isn't in the store, you get an exception.

    >>> store.delete_message('nothing')
    Traceback (most recent call last):
    ...
    KeyError: 'nothing'

But if you delete an existing message, it really gets deleted.

    >>> store.delete_message(global_id)
    >>> list(store.messages)
    []
    >>> print store.get_message(global_id)
    None
    >>> list(store.get_messages_by_message_id(msg['message-id']))
    []
