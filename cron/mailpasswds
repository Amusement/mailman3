#!/usr/local/bin/python 
# Copyright (C) 1998 by the Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 0211-1307, USA.

"""Send password reminders for all lists to all users.

We accumulate users and their passwords, and use the last list to send a
single message to each user with their complete collection of passwords,
rather than sending a single message for each password."""

__version__ = "$Revision: 541 $"

# This puppy should probably do lots of logging.

import sys, os, string

sys.path.append('/home/mailman/mailman/modules')

import maillist, mm_cfg, mm_message, mm_utils


users = {}				# user: (listname, password, url)

USERPASSWORDSTEXT = """
This is a reminder, sent out once a month, about your %s
mailing list memberships.  It includes your subscription info and
how to use it to change it or unsubscribe from a list.

Passwords for %s:

%s
%s
You can visit the URLs to change your membership status or configuration,
including unsubscribing, setting digest-style delivery or disabling
delivery altogether (e.g., for a vacation), and so on.

In addition to the URL interfaces, you can also use email to make such
changes.  For more info, send a message to the '-request' address of the
list (for example, %s-request@%s) containing just
the word 'help' in the message body, and an email message will be sent to
you with instructions.

If you have questions, problems, comments, etc, send them to
mailman-owner@%s.  Thanks!
"""

def MailAllPasswords(list, users):
    """Send each user their complete list of passwords.

    The list can be any random one - it is only used for the message
    delivery mechanism."""
    subj = '%s maillist memberships reminder\n' % list.host_name
    for user, data in users.items():
	table = []
	for l, p, u in data:
	    if len(l) > 9:
		table.append("%s\n           %-10s\n%s\n" % (l, p, u))
	    else:
		table.append("%-10s %-10s\n%s\n" % (l, p, u))
	header = ("%-10s %-10s\n%-10s %-10s"
		  % ("List", "Password // URL", "----", "--------"))
	text = USERPASSWORDSTEXT % (list.host_name,
                                    user,
				    header,
				    string.join(table, "\n"),
				    l, list.host_name,
				    list.host_name)
   	list.SendTextToUser(subject = subj,
   			    recipient = user,
   			    text = text,
 			    sender = mm_cfg.MAILMAN_OWNER,
                            add_headers = ["X-No-Archive: yes"])

def main():
    """Consolidate all the list/url/password info for each user, so we send 
    the user a single message with the info for all their lists on this
    site."""
    list = None
    for name in mm_utils.list_names():
	list = maillist.MailList(name)
	list_name = list.real_name
	reminders_to_admins = list.reminders_to_admins
	for user, password in list.passwords.items():
	    url = list.GetOptionsURL(user)
	    if reminders_to_admins:
		recipient = "%s-admin@%s" % tuple(string.split(user, '@'))
	    else:
		recipient = user
	    if users.has_key(recipient):
		users[recipient].append(list_name, password, url)
	    else:
		users[recipient] = [(list_name, password, url)]
	# Unlocking each list after identifying passwords, but before having
	# the consolidated list, means that there is a window for discrepancy
	# between the reported and actual password.  Big deal - if the user
	# changed the password in the meanwhile, they'll realize it, and it's
	# not worth the extra deadlock risk.
	list.Unlock()

    if list:
	MailAllPasswords(list, users)

if __name__ == "__main__":
    main()
